{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kenne\\\\Projects\\\\Fall-Project\\\\SDHex\\\\hex\\\\src\\\\Game.js\";\nimport Deck from \"card-deck\";\nimport React from \"react\"; //import { render } from \"react-dom\";\n\nimport Cambio from \"./components/Cambio\";\nimport Hand from \"./components/Hand\";\nimport DrawPile from \"./components/DrawPile\";\nimport DiscardPile from \"./components/DiscardPile\";\n/*\nclass Cambio extends React.Component {\n  render(){\n    return (\n      <button onClick = {this.props.onClick}>Cambio!!</button>\n    )\n  };\n};\n\nclass Card extends React.Component {\n  render(){\n    //if(this.props.value === null){return;}\n    return (<button onClick = {this.props.onClick}>Card {this.props.pos}: {this.props.value}</button>) \n  };\n};\n\nclass Hand extends React.Component {\n renderCard(i){\n   return <Card onClick = {() => this.props.onClick(i)} pos = {i + 1} value = {this.props.hand[i]}/>\n }\n render(){\n  var cardHand = [];\n  for(var i = 0; i < this.props.hand.length; i++){\n    cardHand.push(this.renderCard(i));\n  }\n    return (\n      <div>{cardHand}</div>\n      /*\n      <div>\n        <div className=\"card-row\">\n          {this.renderCard(2)}\n          {this.renderCard(3)}\n        </div>\n        <div className=\"card-row\">\n        {this.renderCard(0)}\n          {this.renderCard(1)}\n        </div>\n      </div>\n      \n    )\n  };\n};\n\n\nclass DrawPile extends React.Component {\n  /*\n  Display next card face down\n  1. On click, reveal card\n  2a. Click on discard pile to discard\n  2b. Click on a card in hand to swap\n  \n  render(){\n    if(this.props.swap){\n      return (\n        <div>\n          <button onClick = {this.props.onClick}>Draw</button>\n          <div>Currently Drawn: <button>Swap: {this.props.card}</button></div>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <button onClick = {this.props.onClick}>Draw</button>\n        <div>Currently Drawn: {this.props.card}</div>\n      </div>\n    )\n  };\n};\n\nclass DiscardPile extends React.Component {\n  //Display last discarded card\n  render(){\n    if(!this.props.stick){\n      return (\n        <div>\n          <button onClick = {this.props.onClick}>Discard</button>\n          <div>Last Discarded: {this.props.card}\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <button onClick = {this.props.onClick}>Discard</button>\n        <div>Last Discarded: <button>Stick: {this.props.card}</button>\n        </div>\n      </div>\n    );\n  };\n};\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  /*\n  State for turn, different actions for start and end\n  */\n  //eventHandler\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: true,\n      // Decks\n      drawpile: new Deck([]),\n      discardpile: new Deck([]),\n      // actions allowed on turn\n      stick: false,\n      draw: false,\n      swap: false,\n      discard: false,\n      last_drawn: null,\n      // top of draw pile\n      last_discarded: null,\n      // top of discard pile\n      //actions completed on turn\n      swapped: false,\n      stuck: false,\n      // Hand\n      hand: [null, null, null, null],\n      card_selected: null // card in hand currently selected\n\n    };\n  }\n\n  onStart() {\n    if (!this.state.start) {\n      return;\n    }\n    /*\n    var cards = [\n      [\"2\", \"D\"],[\"2\", \"C\"],[\"2\", \"H\"],[\"2\", \"S\"],\n      [\"3\", \"D\"],[\"3\", \"C\"],[\"3\", \"H\"],[\"3\", \"S\"],\n      [\"4\", \"D\"],[\"4\", \"C\"],[\"4\", \"H\"],[\"4\", \"S\"],\n      [\"5\", \"D\"],[\"5\", \"C\"],[\"5\", \"H\"],[\"5\", \"S\"],\n      [\"6\", \"D\"],[\"6\", \"C\"],[\"6\", \"H\"],[\"6\", \"S\"],\n      [\"7\", \"D\"],[\"7\", \"C\"],[\"7\", \"H\"],[\"7\", \"S\"],\n      [\"8\", \"D\"],[\"8\", \"C\"],[\"8\", \"H\"],[\"8\", \"S\"],\n      [\"9\", \"D\"],[\"9\", \"C\"],[\"9\", \"H\"],[\"9\", \"S\"],\n      [\"10\", \"D\"],[\"10\", \"C\"],[\"10\", \"H\"],[\"10\", \"S\"],\n      [\"j\", \"D\"],[\"j\", \"C\"],[\"j\", \"H\"],[\"j\", \"S\"],\n      [\"q\", \"D\"],[\"q\", \"C\"],[\"q\", \"H\"],[\"q\", \"S\"],\n      [\"k\", \"D\"],[\"k\", \"C\"],[\"k\", \"H\"],[\"k\", \"S\"],\n      [\"a\", \"D\"],[\"a\", \"C\"],[\"a\", \"H\"],[\"a\", \"S\"],\n    ];\n    */\n\n\n    var cards = [\"2D\", \"2C\", \"2H\", \"2S\", \"3D\", \"3C\", \"3H\", \"3S\", \"4D\", \"4C\", \"4H\", \"4S\", \"5D\", \"5C\", \"5H\", \"5S\", \"6D\", \"6C\", \"6H\", \"6S\", \"7D\", \"7C\", \"7H\", \"7S\", \"8D\", \"8C\", \"8H\", \"8S\", \"9D\", \"9C\", \"9H\", \"9S\", \"tD\", \"tC\", \"tH\", \"tS\", \"jD\", \"jC\", \"jH\", \"jS\", \"qD\", \"qC\", \"qH\", \"qS\", \"kD\", \"kC\", \"kH\", \"kS\", \"aD\", \"aC\", \"aH\", \"aS\"];\n    var playing_cards = new Deck(cards);\n    playing_cards.shuffle();\n    this.setState({\n      start: false,\n      draw: true,\n      hand: playing_cards.draw(4),\n      drawpile: playing_cards,\n      card_selected: null\n    });\n  }\n\n  onDrawPileClick() {\n    if (!this.state.draw) {\n      return;\n    }\n\n    var card = this.state.drawpile.draw(1);\n\n    if (!card) {\n      return;\n    } // no cards to draw\n\n\n    this.setState({\n      //actions avaiable\n      draw: false,\n      swap: false,\n      stick: false,\n      discard: true,\n      last_drawn: card,\n      drawpile: this.state.drawpile,\n      swapped: false,\n      stuck: false,\n      card_selected: null\n    });\n  }\n\n  onDiscardClick() {\n    if (!this.state.discard) {\n      return;\n    }\n\n    this.setState({\n      //actions available\n      draw: true,\n      swap: false,\n      stick: false,\n      discard: false,\n      discardpile: this.state.discardpile.addToTop(this.state.last_drawn),\n      last_discarded: this.state.last_drawn,\n      last_drawn: null,\n      //stuck: false,\n      //swapped: true,\n      card_selected: null\n    });\n  }\n\n  toggleSwap() {\n    if (this.state.swapped) {\n      return;\n    }\n\n    if (this.state.last_drawn === null) {\n      return;\n    }\n\n    if (this.state.swap) {\n      this.setState({\n        swap: false\n      });\n    } else {\n      this.setState({\n        swap: true\n      });\n    }\n  }\n\n  toggleStick() {\n    if (this.state.last_discarded === null) {\n      return;\n    }\n\n    if (this.state.stuck) {\n      return;\n    }\n\n    if (this.state.stick) {\n      this.setState({\n        stick: false\n      });\n    } else {\n      this.setState({\n        stick: true\n      });\n    }\n  }\n\n  onHandClick(i) {\n    if (this.state.start) {\n      return;\n    }\n\n    if (this.state.card_selected == null || this.state.card_selected === i) {\n      if (!this.state.swapped) this.toggleSwap();\n      if (!this.state.stuck) this.toggleStick();\n    }\n\n    if (this.state.card_selected === i) {\n      this.setState({\n        card_selected: null\n      });\n    } else {\n      this.setState({\n        card_selected: i\n      });\n    }\n  }\n\n  onSwapClick() {\n    if (this.state.swapped) {\n      return;\n    }\n\n    var card = this.state.hand[this.state.card_selected];\n    var new_hand = this.state.hand;\n    new_hand[this.state.card_selected] = this.state.last_drawn;\n    this.setState({\n      card_selected: null,\n      hand: new_hand,\n      last_drawn: card,\n      swapped: true\n    });\n  }\n\n  onStickClick() {\n    // (success stick) last discarded card and card selected in hand have same face\n    if (this.state.stuck) {\n      return;\n    }\n\n    var new_hand = this.state.hand;\n\n    if (this.state.last_discarded[0] === this.state.hand[this.state.card_selected][0]) {\n      var card = this.state.hand[this.state.card_selected];\n      new_hand.splice(this.state.card_selected, 1);\n      this.setState({\n        hand: new_hand,\n        discardpile: this.state.discardpile.addToTop(card),\n        last_discarded: card\n      });\n    } // failed stick\n    else {\n      new_hand.push(this.state.last_discarded);\n      var new_discardpile = this.state.discardpile;\n      new_discardpile.draw(1);\n      this.setState({\n        hand: new_hand,\n        discardpile: new_discardpile,\n        last_discarded: new_discardpile.top()\n      });\n    }\n\n    this.setState({\n      card_selected: null,\n      stick: false,\n      stuck: true\n    });\n  }\n\n  handScore() {\n    var hand = [];\n\n    for (let i = 0; i < this.state.hand.length; i++) {\n      hand.push(this.state.hand[i]);\n    }\n\n    var total_score = 0;\n\n    for (let i = 0; i < this.state.hand.length; i++) {\n      var card = hand[i];\n\n      if (card[0] === \"k\" && (card[1] === \"D\" || card[1] === \"H\")) {\n        total_score -= 1;\n      } else if (card[0] === \"t\" || card[0] === \"j\" || card[0] === \"q\" || card[0] === \"k\") {\n        total_score += 10;\n      } else if (card[0] === \"a\") {\n        total_score += 1;\n      } else {\n        total_score += parseInt(card[0]);\n      }\n    }\n\n    return total_score;\n  }\n\n  callCambio() {\n    if (this.state.start) {\n      return;\n    }\n\n    var total_score = this.handScore();\n    alert(\"Score: \" + total_score);\n    this.setState({\n      start: true,\n      // Decks\n      drawpile: new Deck([]),\n      discardpile: new Deck([]),\n      // actions allowed on turn\n      stick: false,\n      draw: false,\n      swap: false,\n      discard: false,\n      last_drawn: null,\n      // top of draw pile\n      last_discarded: null,\n      // top of discard pile\n      //actions completed on turn\n      swapped: false,\n      stuck: false,\n      // Hand\n      hand: [null, null, null, null],\n      card_selected: null // card in hand currently selected\n\n    });\n  }\n\n  render() {\n    //diamonds(D), cloves(C), hearts(H), spades(S)\n    //2-10, j,q,k,a\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Cambio, {\n        onClick: () => this.callCambio()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.onStart(),\n        children: \"start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(DrawPile, {\n          handleDraw: () => this.onDrawPileClick(),\n          handleSwap: () => this.onSwapClick(),\n          card: this.state.last_drawn,\n          swap: this.state.swap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DiscardPile, {\n          handleDiscard: () => this.onDiscardClick(),\n          handleStick: () => this.onStickClick(),\n          stick: this.state.stick,\n          last_discard: this.state.last_discarded\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"header1\", {\n          children: \"Your Hand: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Hand, {\n          onClick: i => this.onHandClick(i),\n          hand: this.state.hand\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default Game;","map":{"version":3,"sources":["C:/Users/kenne/Projects/Fall-Project/SDHex/hex/src/Game.js"],"names":["Deck","React","Cambio","Hand","DrawPile","DiscardPile","Game","Component","constructor","props","state","start","drawpile","discardpile","stick","draw","swap","discard","last_drawn","last_discarded","swapped","stuck","hand","card_selected","onStart","cards","playing_cards","shuffle","setState","onDrawPileClick","card","onDiscardClick","addToTop","toggleSwap","toggleStick","onHandClick","i","onSwapClick","new_hand","onStickClick","splice","push","new_discardpile","top","handScore","length","total_score","parseInt","callCambio","alert","render"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AACjC;AACF;AACA;AACE;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEX;AACAC,MAAAA,QAAQ,EAAE,IAAIZ,IAAJ,CAAS,EAAT,CAHC;AAIXa,MAAAA,WAAW,EAAE,IAAIb,IAAJ,CAAS,EAAT,CAJF;AAKX;AACAc,MAAAA,KAAK,EAAE,KANI;AAOXC,MAAAA,IAAI,EAAE,KAPK;AAQXC,MAAAA,IAAI,EAAE,KARK;AASXC,MAAAA,OAAO,EAAE,KATE;AAWXC,MAAAA,UAAU,EAAE,IAXD;AAWO;AAClBC,MAAAA,cAAc,EAAE,IAZL;AAYW;AAEtB;AACAC,MAAAA,OAAO,EAAE,KAfE;AAgBXC,MAAAA,KAAK,EAAE,KAhBI;AAkBX;AACAC,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IA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","sourcesContent":["import Deck from \"card-deck\";\nimport React from \"react\";\n//import { render } from \"react-dom\";\nimport Cambio from \"./components/Cambio\";\nimport Hand from \"./components/Hand\";\nimport DrawPile from \"./components/DrawPile\";\nimport DiscardPile from \"./components/DiscardPile\";\n/*\nclass Cambio extends React.Component {\n  render(){\n    return (\n      <button onClick = {this.props.onClick}>Cambio!!</button>\n    )\n  };\n};\n\nclass Card extends React.Component {\n  render(){\n    //if(this.props.value === null){return;}\n    return (<button onClick = {this.props.onClick}>Card {this.props.pos}: {this.props.value}</button>) \n  };\n};\n\nclass Hand extends React.Component {\n renderCard(i){\n   return <Card onClick = {() => this.props.onClick(i)} pos = {i + 1} value = {this.props.hand[i]}/>\n }\n render(){\n  var cardHand = [];\n  for(var i = 0; i < this.props.hand.length; i++){\n    cardHand.push(this.renderCard(i));\n  }\n    return (\n      <div>{cardHand}</div>\n      /*\n      <div>\n        <div className=\"card-row\">\n          {this.renderCard(2)}\n          {this.renderCard(3)}\n        </div>\n        <div className=\"card-row\">\n        {this.renderCard(0)}\n          {this.renderCard(1)}\n        </div>\n      </div>\n      \n    )\n  };\n};\n\n\nclass DrawPile extends React.Component {\n  /*\n  Display next card face down\n  1. On click, reveal card\n  2a. Click on discard pile to discard\n  2b. Click on a card in hand to swap\n  \n  render(){\n    if(this.props.swap){\n      return (\n        <div>\n          <button onClick = {this.props.onClick}>Draw</button>\n          <div>Currently Drawn: <button>Swap: {this.props.card}</button></div>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <button onClick = {this.props.onClick}>Draw</button>\n        <div>Currently Drawn: {this.props.card}</div>\n      </div>\n    )\n  };\n};\n\nclass DiscardPile extends React.Component {\n  //Display last discarded card\n  render(){\n    if(!this.props.stick){\n      return (\n        <div>\n          <button onClick = {this.props.onClick}>Discard</button>\n          <div>Last Discarded: {this.props.card}\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <button onClick = {this.props.onClick}>Discard</button>\n        <div>Last Discarded: <button>Stick: {this.props.card}</button>\n        </div>\n      </div>\n    );\n  };\n};\n*/\nclass Game extends React.Component {\n  /*\n  State for turn, different actions for start and end\n  */\n  //eventHandler\n  constructor(props){\n    super(props);\n    this.state = {\n      start: true,\n      // Decks\n      drawpile: new Deck([]),\n      discardpile: new Deck([]),\n      // actions allowed on turn\n      stick: false,\n      draw: false,\n      swap: false,\n      discard: false,\n\n      last_drawn: null, // top of draw pile\n      last_discarded: null, // top of discard pile\n\n      //actions completed on turn\n      swapped: false,\n      stuck: false,\n\n      // Hand\n      hand: [null, null, null, null],\n      card_selected: null, // card in hand currently selected\n    };\n  };\n  onStart(){\n    if(!this.state.start){return;}\n    /*\n    var cards = [\n      [\"2\", \"D\"],[\"2\", \"C\"],[\"2\", \"H\"],[\"2\", \"S\"],\n      [\"3\", \"D\"],[\"3\", \"C\"],[\"3\", \"H\"],[\"3\", \"S\"],\n      [\"4\", \"D\"],[\"4\", \"C\"],[\"4\", \"H\"],[\"4\", \"S\"],\n      [\"5\", \"D\"],[\"5\", \"C\"],[\"5\", \"H\"],[\"5\", \"S\"],\n      [\"6\", \"D\"],[\"6\", \"C\"],[\"6\", \"H\"],[\"6\", \"S\"],\n      [\"7\", \"D\"],[\"7\", \"C\"],[\"7\", \"H\"],[\"7\", \"S\"],\n      [\"8\", \"D\"],[\"8\", \"C\"],[\"8\", \"H\"],[\"8\", \"S\"],\n      [\"9\", \"D\"],[\"9\", \"C\"],[\"9\", \"H\"],[\"9\", \"S\"],\n      [\"10\", \"D\"],[\"10\", \"C\"],[\"10\", \"H\"],[\"10\", \"S\"],\n      [\"j\", \"D\"],[\"j\", \"C\"],[\"j\", \"H\"],[\"j\", \"S\"],\n      [\"q\", \"D\"],[\"q\", \"C\"],[\"q\", \"H\"],[\"q\", \"S\"],\n      [\"k\", \"D\"],[\"k\", \"C\"],[\"k\", \"H\"],[\"k\", \"S\"],\n      [\"a\", \"D\"],[\"a\", \"C\"],[\"a\", \"H\"],[\"a\", \"S\"],\n    ];\n    */\n    var cards = [\n      \"2D\",\"2C\",\"2H\",\"2S\",\n      \"3D\",\"3C\",\"3H\",\"3S\",\n      \"4D\",\"4C\",\"4H\",\"4S\",\n      \"5D\",\"5C\",\"5H\",\"5S\",\n      \"6D\",\"6C\",\"6H\",\"6S\",\n      \"7D\",\"7C\",\"7H\",\"7S\",\n      \"8D\",\"8C\",\"8H\",\"8S\",\n      \"9D\",\"9C\",\"9H\",\"9S\",\n      \"tD\",\"tC\",\"tH\",\"tS\",\n      \"jD\",\"jC\",\"jH\",\"jS\",\n      \"qD\",\"qC\",\"qH\",\"qS\",\n      \"kD\",\"kC\",\"kH\",\"kS\",\n      \"aD\",\"aC\",\"aH\",\"aS\",\n    ];\n    var playing_cards = new Deck(cards);\n    playing_cards.shuffle();\n    this.setState({\n      start: false,\n      draw: true,\n      hand: playing_cards.draw(4),\n      drawpile: playing_cards,\n      card_selected: null,\n    })\n  }\n  onDrawPileClick(){\n    if(!this.state.draw){return;}\n    var card = this.state.drawpile.draw(1);\n    if(!card){return;} // no cards to draw\n    this.setState({\n      //actions avaiable\n      draw: false,\n      swap: false,\n      stick: false,\n      discard: true,\n\n\n      last_drawn: card,\n      drawpile: this.state.drawpile,\n      swapped: false,\n      stuck: false,\n      card_selected: null,\n    })\n    \n  };\n  onDiscardClick(){\n    if(!this.state.discard){return;}\n    this.setState({\n      //actions available\n      draw: true,\n      swap: false,\n      stick: false,\n      discard: false,\n\n      discardpile: this.state.discardpile.addToTop(this.state.last_drawn),\n      last_discarded: this.state.last_drawn,\n      last_drawn: null,\n\n      //stuck: false,\n      //swapped: true,\n      card_selected: null,\n    })\n  };\n\n  toggleSwap(){\n    if(this.state.swapped){return;}\n    if(this.state.last_drawn === null){return;}\n    if(this.state.swap){\n      this.setState({\n        swap: false,\n      })\n    }\n    else{\n      this.setState({\n        swap: true,\n      })\n    }\n  }\n  toggleStick(){\n    if(this.state.last_discarded === null){return;}\n    if(this.state.stuck){return;}\n    if(this.state.stick){\n      this.setState({\n        stick: false,\n      })\n    }\n    else{\n      this.setState({\n        stick: true,\n      })\n    }\n  }\n  onHandClick(i){\n    if(this.state.start){return;}\n    if(this.state.card_selected == null || this.state.card_selected === i){\n      if(!this.state.swapped)\n        this.toggleSwap();\n      if(!this.state.stuck)\n        this.toggleStick();\n    }\n    if(this.state.card_selected === i){\n      this.setState({\n        card_selected: null,\n      })\n    }\n    else{\n      this.setState({\n        card_selected: i,\n      })\n    }\n  };\n\n  onSwapClick(){\n    if(this.state.swapped){return;}\n    var card = this.state.hand[this.state.card_selected];\n    var new_hand = this.state.hand;\n    new_hand[this.state.card_selected] = this.state.last_drawn;\n    this.setState({\n      card_selected: null,\n      hand: new_hand,\n      last_drawn: card,\n      swapped: true,\n    })\n  };\n  onStickClick(){\n    // (success stick) last discarded card and card selected in hand have same face\n    if(this.state.stuck){return;}\n    var new_hand = this.state.hand;\n    if(this.state.last_discarded[0] === this.state.hand[this.state.card_selected][0]){\n      var card = this.state.hand[this.state.card_selected];  \n      new_hand.splice(this.state.card_selected, 1);\n      this.setState({\n        hand: new_hand,\n        discardpile: this.state.discardpile.addToTop(card),\n        last_discarded: card,\n      })\n    }\n    // failed stick\n    else{\n      new_hand.push(this.state.last_discarded);\n      var new_discardpile = this.state.discardpile;\n      new_discardpile.draw(1);\n\n      this.setState({\n        hand: new_hand,\n        discardpile: new_discardpile,\n        last_discarded: new_discardpile.top(),\n      })\n    }\n    this.setState({\n      card_selected: null,\n      stick: false,\n      stuck: true,\n    })\n  };\n\n  handScore(){\n    var hand = [];\n    for(let i = 0; i < this.state.hand.length; i++){\n      hand.push(this.state.hand[i]);\n    }\n    var total_score = 0;\n    for(let i = 0; i < this.state.hand.length; i++){\n      var card = hand[i];\n      if(card[0] === \"k\" && (card[1] === \"D\" || card[1] === \"H\")){\n        total_score -= 1;\n      }\n      else if(card[0] === \"t\" || card[0] === \"j\" || card[0] === \"q\" || card[0] === \"k\"){\n        total_score += 10;\n      }\n      else if(card[0] === \"a\"){\n        total_score += 1;\n      }\n      else{\n        total_score += parseInt(card[0]);\n      }\n    }\n    return total_score;\n  };\n  callCambio(){\n    if(this.state.start){return;}\n    var total_score = this.handScore();\n    alert(\"Score: \" + total_score);\n    this.setState({\n      start: true,\n      // Decks\n      drawpile: new Deck([]),\n      discardpile: new Deck([]),\n      // actions allowed on turn\n      stick: false,\n      draw: false,\n      swap: false,\n      discard: false,\n\n      last_drawn: null, // top of draw pile\n      last_discarded: null, // top of discard pile\n\n      //actions completed on turn\n      swapped: false,\n      stuck: false,\n\n      // Hand\n      hand: [null, null, null, null],\n      card_selected: null, // card in hand currently selected\n    })\n  };\n\n\n  render(){\n    //diamonds(D), cloves(C), hearts(H), spades(S)\n    //2-10, j,q,k,a\n    return (\n      <div>\n        <Cambio \n        onClick = {() => this.callCambio()}\n        />\n        <button onClick = {() => this.onStart()}>start</button>\n        <div>\n          <DrawPile\n          handleDraw = {() => this.onDrawPileClick()}\n          handleSwap = {() => this.onSwapClick()}\n          card = {this.state.last_drawn}\n          swap = {this.state.swap}\n          />\n          <DiscardPile\n          handleDiscard = {() => this.onDiscardClick()}\n          handleStick = {() => this.onStickClick()}\n          stick = {this.state.stick}\n          last_discard = {this.state.last_discarded}\n          />\n        </div>\n        <div>\n          <header1>Your Hand: </header1>\n          <Hand\n          onClick = {(i) => this.onHandClick(i)}\n          hand = {this.state.hand}\n          />\n        </div>\n      \n      </div>\n    )\n  };\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}