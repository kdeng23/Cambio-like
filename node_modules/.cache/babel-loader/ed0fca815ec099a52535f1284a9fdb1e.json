{"ast":null,"code":"/**\n * @module deck\n */\n'use strict';\n\nvar isArray = require('./lib/is-array'); // Get a random integer index within the provided array\n\n\nfunction randomIndex(arr) {\n  return Math.floor(Math.random() * arr.length);\n} // Predicate function to filter out undefined values\n\n\nfunction isNotUndefined(val) {\n  return typeof val !== 'undefined';\n} // Shuffle an array in place, returning that array\n\n\nfunction shuffle(arr) {\n  // Fisher–Yates implementation adapted from http://bost.ocks.org/mike/shuffle/\n  var remaining = arr.length;\n  var tmp;\n  var idx; // While there remain elements to shuffle…\n\n  while (remaining) {\n    // Pick a remaining element...\n    idx = Math.floor(Math.random() * remaining--); // And swap it with the current element.\n\n    tmp = arr[remaining];\n    arr[remaining] = arr[idx];\n    arr[idx] = tmp;\n  }\n}\n/**\n * @class Deck\n */\n\n\nfunction Deck(arr) {\n  if (isArray(arr)) {\n    this.cards(arr);\n  }\n}\n/**\n * Populate the deck with an array of cards, wiping out any cards that had\n * previously been added to the deck\n *\n * @chainable\n * @param  {Array} cardArray An array of cards to use for the deck\n * @return {Deck} The deck instance (for chaining)\n */\n\n\nDeck.prototype.cards = function (cardArray) {\n  if (!isArray(cardArray)) {\n    return this;\n  } // Replace the deck with the new cards\n\n\n  this._stack = cardArray;\n  return this;\n};\n/**\n * Randomize the order of cards within the deck\n *\n * @chainable\n * @return {Deck} The deck instance (for chaining)\n */\n\n\nDeck.prototype.shuffle = function () {\n  shuffle(this._stack);\n  return this;\n};\n/**\n * Get the number of cards currently contained within the deck\n *\n * @return {Number} The number of cards left in the deck\n */\n\n\nDeck.prototype.remaining = function () {\n  return this._stack.length;\n};\n/**\n * Draw a card or cards, removing the drawn cards from the deck\n *\n * @param {Number} [count] The number of cards to draw\n * @return {Object|Array} A single card or an array of cards\n */\n\n\nDeck.prototype.draw = function (count) {\n  count || (count = 1);\n\n  var drawnCards = this._stack.splice(0, count);\n\n  if (!drawnCards.length) {\n    return;\n  }\n\n  return count === 1 ? drawnCards[0] : drawnCards;\n};\n/**\n * Draw a card or cards from the bottom of the deck, removing the drawn cards\n * from the deck\n *\n * @param  {Number} [count] The number of cards to draw\n * @return {Object|Array} A single card or an array of cards\n */\n\n\nDeck.prototype.drawFromBottom = function (count) {\n  count || (count = 1);\n\n  var drawnCards = this._stack.splice(-count, count).reverse();\n\n  if (!drawnCards.length) {\n    return;\n  }\n\n  return count === 1 ? drawnCards[0] : drawnCards;\n};\n/**\n * Draw a card or cards matching a condition defined in a provided predicate\n * function, removing the drawn cards from the deck\n *\n * @param {Function} predicate A function to use to evaluate whether a given\n *                             card in the deck should be drawn\n * @param {Number} [count] The number of cards to draw\n * @return {Object|Array} A single card or an array of cards\n */\n\n\nDeck.prototype.drawWhere = function (predicate, count) {\n  if (typeof predicate !== 'function') {\n    return;\n  }\n\n  count || (count = 1);\n\n  var drawnCards = this._stack.filter(predicate).slice(0, count);\n\n  for (var i = 0; i < drawnCards.length; i++) {\n    // Remove from the stack\n    this._stack.splice(this._stack.indexOf(drawnCards[i]), 1);\n  }\n\n  if (!drawnCards.length) {\n    return;\n  }\n\n  return count === 1 ? drawnCards[0] : drawnCards;\n};\n/**\n * Draw a card or cards from random positions in the deck, removing the drawn\n * cards from the deck\n *\n * @param {Number} [count] The number of cards to draw\n * @return {Object|Array} A single card or an array of cards\n */\n\n\nDeck.prototype.drawRandom = function (count) {\n  if (!this._stack.length) {\n    return;\n  }\n\n  count || (count = 1);\n\n  if (count === 1) {\n    return this._stack.splice(randomIndex(this._stack), 1)[0];\n  }\n\n  var drawnCards = [];\n\n  for (var i = 0; i < count; i++) {\n    drawnCards.push(this._stack.splice(randomIndex(this._stack), 1)[0]);\n  }\n\n  drawnCards = drawnCards.filter(isNotUndefined);\n  return drawnCards;\n};\n/**\n * Insert a card or cards at the bottom of the deck in order\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\n\n\nDeck.prototype.addToBottom = function (cards) {\n  if (!isArray(cards)) {\n    // Handle individual card objects\n    return this.addToBottom([cards]);\n  }\n\n  this._stack.push.apply(this._stack, cards);\n\n  return this;\n};\n/**\n * Insert a card or cards at the bottom of the deck in random order\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\n\n\nDeck.prototype.shuffleToBottom = function (cards) {\n  if (!isArray(cards)) {\n    // Handle individual card objects\n    return this.shuffleToBottom([cards]);\n  }\n\n  shuffle(cards);\n  return this.addToBottom(cards);\n};\n/**\n * Insert a card or cards at the top of the deck in order\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\n\n\nDeck.prototype.addToTop = function (cards) {\n  if (!isArray(cards)) {\n    // Handle individual card objects\n    return this.addToTop([cards]);\n  }\n\n  this._stack.unshift.apply(this._stack, cards);\n\n  return this;\n};\n/**\n * Insert a card or cards at the top of the deck in random order\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\n\n\nDeck.prototype.shuffleToTop = function (cards) {\n  if (!isArray(cards)) {\n    // Handle individual card objects\n    return this.shuffleToTop([cards]);\n  }\n\n  shuffle(cards);\n  return this.addToTop(cards);\n};\n/**\n * Insert a card or cards into the deck at random positions\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\n\n\nDeck.prototype.addRandom = function (cards) {\n  if (!isArray(cards)) {\n    // Handle individual card objects\n    return this.addRandom([cards]);\n  }\n\n  var stack = this._stack;\n  cards.forEach(function (card) {\n    stack.splice(randomIndex(stack), 0, card);\n  });\n  return this;\n};\n/**\n * Look at a card or cards on the bottom of the deck, without removing them\n * from the deck\n *\n * @param {Number} count The number of cards to retrieve\n * @return {Object|Array} A single card or an array of cards\n */\n\n\nDeck.prototype.top = function (count) {\n  if (!this._stack.length) {\n    return;\n  }\n\n  count || (count = 1);\n\n  var returnedCards = this._stack.slice(0, count);\n\n  return count === 1 ? returnedCards[0] : returnedCards;\n};\n/**\n * Look at a card or cards on the top of the deck, without removing them from\n * the deck\n *\n * @param {Number} count The number of cards to retrieve\n * @return {Object|Array} A single card or an array of cards\n */\n\n\nDeck.prototype.bottom = function (count) {\n  if (!this._stack.length) {\n    return;\n  }\n\n  count || (count = 1);\n\n  var returnedCards = this._stack.slice(-count).reverse();\n\n  return count === 1 ? returnedCards[0] : returnedCards;\n};\n/**\n * Look at a random card or cards, without removing them from the deck\n *\n * @param {Number} count The number of cards to retrieve\n * @return {Object|Array} A single card or an array of cards\n */\n\n\nDeck.prototype.random = function (count) {\n  if (!this._stack.length) {\n    return;\n  }\n\n  count || (count = 1);\n  var idx;\n\n  if (count === 1) {\n    idx = randomIndex(this._stack);\n    return this._stack.slice(idx, idx + 1)[0];\n  }\n\n  var cards = [].concat(this._stack);\n  shuffle(cards);\n  cards.length = count;\n  return cards.filter(isNotUndefined);\n};\n\nmodule.exports = Deck;","map":{"version":3,"sources":["C:/Users/kenne/Projects/Fall-Project/cambio-like/node_modules/card-deck/deck.js"],"names":["isArray","require","randomIndex","arr","Math","floor","random","length","isNotUndefined","val","shuffle","remaining","tmp","idx","Deck","cards","prototype","cardArray","_stack","draw","count","drawnCards","splice","drawFromBottom","reverse","drawWhere","predicate","filter","slice","i","indexOf","drawRandom","push","addToBottom","apply","shuffleToBottom","addToTop","unshift","shuffleToTop","addRandom","stack","forEach","card","top","returnedCards","bottom","concat","module","exports"],"mappings":"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","sourcesContent":["/**\n * @module deck\n */\n'use strict';\n\nvar isArray = require( './lib/is-array' );\n\n// Get a random integer index within the provided array\nfunction randomIndex( arr ) {\n  return Math.floor( Math.random() * arr.length );\n}\n\n// Predicate function to filter out undefined values\nfunction isNotUndefined( val ) {\n  return typeof val !== 'undefined';\n}\n\n// Shuffle an array in place, returning that array\nfunction shuffle( arr ) {\n  // Fisher–Yates implementation adapted from http://bost.ocks.org/mike/shuffle/\n  var remaining = arr.length;\n  var tmp;\n  var idx;\n\n  // While there remain elements to shuffle…\n  while ( remaining ) {\n    // Pick a remaining element...\n    idx = Math.floor( Math.random() * remaining-- );\n\n    // And swap it with the current element.\n    tmp = arr[ remaining ];\n    arr[ remaining ] = arr[ idx ];\n    arr[ idx ] = tmp;\n  }\n}\n\n/**\n * @class Deck\n */\nfunction Deck( arr ) {\n  if ( isArray( arr ) ) {\n    this.cards( arr );\n  }\n}\n\n/**\n * Populate the deck with an array of cards, wiping out any cards that had\n * previously been added to the deck\n *\n * @chainable\n * @param  {Array} cardArray An array of cards to use for the deck\n * @return {Deck} The deck instance (for chaining)\n */\nDeck.prototype.cards = function( cardArray ) {\n  if ( ! isArray( cardArray ) ) { return this; }\n  // Replace the deck with the new cards\n  this._stack = cardArray;\n  return this;\n};\n\n/**\n * Randomize the order of cards within the deck\n *\n * @chainable\n * @return {Deck} The deck instance (for chaining)\n */\nDeck.prototype.shuffle = function() {\n  shuffle( this._stack );\n  return this;\n};\n\n/**\n * Get the number of cards currently contained within the deck\n *\n * @return {Number} The number of cards left in the deck\n */\nDeck.prototype.remaining = function() {\n  return this._stack.length;\n};\n\n/**\n * Draw a card or cards, removing the drawn cards from the deck\n *\n * @param {Number} [count] The number of cards to draw\n * @return {Object|Array} A single card or an array of cards\n */\nDeck.prototype.draw = function( count ) {\n  count || ( count = 1 );\n  var drawnCards = this._stack.splice( 0, count );\n  if ( ! drawnCards.length ) { return; }\n  return count === 1 ? drawnCards[ 0 ] : drawnCards;\n};\n\n/**\n * Draw a card or cards from the bottom of the deck, removing the drawn cards\n * from the deck\n *\n * @param  {Number} [count] The number of cards to draw\n * @return {Object|Array} A single card or an array of cards\n */\nDeck.prototype.drawFromBottom = function( count ) {\n  count || ( count = 1 );\n  var drawnCards = this._stack.splice( -count, count ).reverse();\n  if ( ! drawnCards.length ) { return; }\n  return count === 1 ? drawnCards[ 0 ] : drawnCards;\n};\n\n/**\n * Draw a card or cards matching a condition defined in a provided predicate\n * function, removing the drawn cards from the deck\n *\n * @param {Function} predicate A function to use to evaluate whether a given\n *                             card in the deck should be drawn\n * @param {Number} [count] The number of cards to draw\n * @return {Object|Array} A single card or an array of cards\n */\nDeck.prototype.drawWhere = function( predicate, count ) {\n  if ( typeof predicate !== 'function' ) {\n    return;\n  }\n  count || ( count = 1 );\n  var drawnCards = this._stack.filter( predicate ).slice( 0, count );\n  for ( var i = 0; i < drawnCards.length; i++ ) {\n    // Remove from the stack\n    this._stack.splice( this._stack.indexOf( drawnCards[ i ] ), 1 );\n  }\n  if ( ! drawnCards.length ) { return; }\n  return count === 1 ? drawnCards[ 0 ] : drawnCards;\n};\n\n/**\n * Draw a card or cards from random positions in the deck, removing the drawn\n * cards from the deck\n *\n * @param {Number} [count] The number of cards to draw\n * @return {Object|Array} A single card or an array of cards\n */\nDeck.prototype.drawRandom = function( count ) {\n  if ( ! this._stack.length ) { return; }\n  count || ( count = 1 );\n  if ( count === 1 ) {\n    return this._stack.splice( randomIndex( this._stack ), 1 )[ 0 ];\n  }\n  var drawnCards = [];\n  for ( var i = 0; i < count; i++ ) {\n    drawnCards.push( this._stack.splice( randomIndex( this._stack ), 1 )[ 0 ] );\n  }\n  drawnCards = drawnCards.filter( isNotUndefined );\n  return drawnCards;\n};\n\n/**\n * Insert a card or cards at the bottom of the deck in order\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\nDeck.prototype.addToBottom = function( cards ) {\n  if ( ! isArray( cards ) ) {\n    // Handle individual card objects\n    return this.addToBottom( [ cards ] );\n  }\n  this._stack.push.apply( this._stack, cards );\n  return this;\n};\n\n/**\n * Insert a card or cards at the bottom of the deck in random order\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\nDeck.prototype.shuffleToBottom = function( cards ) {\n  if ( ! isArray( cards ) ) {\n    // Handle individual card objects\n    return this.shuffleToBottom( [ cards ] );\n  }\n  shuffle( cards );\n  return this.addToBottom( cards );\n};\n\n/**\n * Insert a card or cards at the top of the deck in order\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\nDeck.prototype.addToTop = function( cards ) {\n  if ( ! isArray( cards ) ) {\n    // Handle individual card objects\n    return this.addToTop( [ cards ] );\n  }\n  this._stack.unshift.apply( this._stack, cards );\n  return this;\n};\n\n/**\n * Insert a card or cards at the top of the deck in random order\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\nDeck.prototype.shuffleToTop = function( cards ) {\n  if ( ! isArray( cards ) ) {\n    // Handle individual card objects\n    return this.shuffleToTop( [ cards ] );\n  }\n  shuffle( cards );\n  return this.addToTop( cards );\n};\n\n/**\n * Insert a card or cards into the deck at random positions\n *\n * @chainable\n * @param {Object|Array} cards The card object or array of card objects to insert\n * @return {Deck} The deck instance (for chaining)\n */\nDeck.prototype.addRandom = function( cards ) {\n  if ( ! isArray( cards ) ) {\n    // Handle individual card objects\n    return this.addRandom( [ cards ] );\n  }\n  var stack = this._stack;\n  cards.forEach( function( card ) {\n    stack.splice( randomIndex( stack ), 0, card );\n  } );\n  return this;\n};\n\n/**\n * Look at a card or cards on the bottom of the deck, without removing them\n * from the deck\n *\n * @param {Number} count The number of cards to retrieve\n * @return {Object|Array} A single card or an array of cards\n */\nDeck.prototype.top = function( count ) {\n  if ( ! this._stack.length ) { return; }\n  count || ( count = 1 );\n  var returnedCards = this._stack.slice( 0, count );\n  return count === 1 ? returnedCards[ 0 ] : returnedCards;\n};\n\n/**\n * Look at a card or cards on the top of the deck, without removing them from\n * the deck\n *\n * @param {Number} count The number of cards to retrieve\n * @return {Object|Array} A single card or an array of cards\n */\nDeck.prototype.bottom = function( count ) {\n  if ( ! this._stack.length ) { return; }\n  count || ( count = 1 );\n  var returnedCards =  this._stack.slice( -count ).reverse();\n  return count === 1 ? returnedCards[ 0 ] : returnedCards;\n};\n\n/**\n * Look at a random card or cards, without removing them from the deck\n *\n * @param {Number} count The number of cards to retrieve\n * @return {Object|Array} A single card or an array of cards\n */\nDeck.prototype.random = function( count ) {\n  if ( ! this._stack.length ) { return; }\n  count || ( count = 1 );\n  var idx;\n  if ( count === 1 ) {\n    idx = randomIndex( this._stack );\n    return this._stack.slice( idx, idx + 1 )[ 0 ];\n  }\n  var cards = [].concat( this._stack );\n  shuffle( cards );\n  cards.length = count;\n  return cards.filter( isNotUndefined );\n};\n\nmodule.exports = Deck;\n"]},"metadata":{},"sourceType":"script"}